

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Oct 29 10:25:24 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F628A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001F                     	;# 
    78  0081                     	;# 
    79  0085                     	;# 
    80  0086                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  0092                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009C                     	;# 
    89  009D                     	;# 
    90  009F                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0015                     	;# 
   108  0015                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  001A                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  008C                     	;# 
   119  008E                     	;# 
   120  0092                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009F                     	;# 
   128  0005                     _PORTAbits	set	5
   129  0019                     _TXREG	set	25
   130  001A                     _RCREG	set	26
   131  0006                     _PORTBbits	set	6
   132  005F                     _GIE	set	95
   133  0064                     _TXIF	set	100
   134  0065                     _RCIF	set	101
   135  00C4                     _CREN	set	196
   136  00C7                     _SPEN	set	199
   137  00F8                     _CM0	set	248
   138  00F9                     _CM1	set	249
   139  00FA                     _CM2	set	250
   140  0099                     _SPBRG	set	153
   141  0085                     _TRISAbits	set	133
   142  0086                     _TRISBbits	set	134
   143  04C5                     _TXEN	set	1221
   144  04C4                     _SYNC	set	1220
   145  04C2                     _BRGH	set	1218
   146                           
   147                           ; #config settings
   148  0000                     
   149                           	psect	cinit
   150  07F5                     start_initialization:	
   151  07F5                     __initialization:	
   152                           
   153                           ; Clear objects allocated to COMMON
   154  07F5  01F0               	clrf	__pbssCOMMON& (0+127)
   155  07F6  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   156  07F7  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   157  07F8  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   158  07F9  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   159  07FA  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   160  07FB  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   161  07FC  01F7               	clrf	(__pbssCOMMON+7)& (0+127)
   162  07FD  01F8               	clrf	(__pbssCOMMON+8)& (0+127)
   163  07FE                     end_of_initialization:	
   164                           ;End of C runtime variable initialization code
   165                           
   166  07FE                     __end_of__initialization:	
   167  07FE  0183               	clrf	3
   168  07FF  2EBE               	ljmp	_main	;jump to C main() function
   169                           
   170                           	psect	bssCOMMON
   171  0070                     __pbssCOMMON:	
   172  0070                     _tActual:	
   173  0070                     	ds	2
   174  0072                     _tInicio:	
   175  0072                     	ds	2
   176  0074                     _tickCounter:	
   177  0074                     	ds	2
   178  0076                     _estadoActual:	
   179  0076                     	ds	1
   180  0077                     ActualizarMEF@aux:	
   181  0077                     	ds	1
   182  0078                     ActualizarMEF@res:	
   183  0078                     	ds	1
   184                           
   185                           	psect	cstackCOMMON
   186  0079                     __pcstackCOMMON:	
   187  0079                     ?_uartReadByte:	
   188  0079                     ?_initApp:	
   189                           ; 1 bit 
   190                           
   191  0079                     ??_initApp:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0079                     ?_InicializarMEF:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0079                     ?_ActualizarMEF:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0079                     ?_uartConfig:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0079                     ??_uartConfig:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0079                     ?_RxMode:	
   207                           ; 1 bytes @ 0x0
   208                           
   209  0079                     ??_RxMode:	
   210                           ; 1 bytes @ 0x0
   211                           
   212  0079                     ?_TxMode:	
   213                           ; 1 bytes @ 0x0
   214                           
   215  0079                     ??_TxMode:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0079                     ?_main:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0079                     ??_uartReadByte:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0079                     ?_uartWriteByte:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0079                     ??_uartWriteByte:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0079                     ?_tickRead:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0079                     uartWriteByte@value:	
   234                           ; 2 bytes @ 0x0
   235                           
   236                           
   237                           ; 1 bytes @ 0x0
   238  0079                     	ds	1
   239  007A                     uartReadByte@receivedByte:	
   240                           
   241                           ; 1 bytes @ 0x1
   242  007A                     	ds	1
   243  007B                     ??_ActualizarMEF:	
   244  007B                     ??_tickRead:	
   245                           ; 1 bytes @ 0x2
   246                           
   247  007B                     tickRead@aux:	
   248                           ; 1 bytes @ 0x2
   249                           
   250                           
   251                           ; 2 bytes @ 0x2
   252  007B                     	ds	2
   253  007D                     ??_InicializarMEF:	
   254  007D                     ??_main:	
   255                           ; 1 bytes @ 0x4
   256                           
   257                           
   258                           	psect	maintext
   259  06BE                     __pmaintext:	
   260                           ; 1 bytes @ 0x4
   261 ;;
   262 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   263 ;;
   264 ;; *************** function _main *****************
   265 ;; Defined at:
   266 ;;		line 11 in file "main.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;		None
   269 ;; Auto vars:     Size  Location     Type
   270 ;;		None
   271 ;; Return value:  Size  Location     Type
   272 ;;                  1    wreg      void 
   273 ;; Registers used:
   274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   275 ;; Tracked objects:
   276 ;;		On entry : B00/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   280 ;;      Params:         0       0       0       0
   281 ;;      Locals:         0       0       0       0
   282 ;;      Temps:          0       0       0       0
   283 ;;      Totals:         0       0       0       0
   284 ;;Total ram usage:        0 bytes
   285 ;; Hardware stack levels required when called:    2
   286 ;; This function calls:
   287 ;;		_ActualizarMEF
   288 ;;		_InicializarMEF
   289 ;;		_initApp
   290 ;; This function is called by:
   291 ;;		Startup code after reset
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295                           
   296                           ;psect for function _main
   297  06BE                     _main:	
   298                           
   299                           ;main.c: 12: initApp();
   300                           
   301                           ;incstack = 0
   302                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   303  06BE  2706               	fcall	_initApp
   304                           
   305                           ;main.c: 13: InicializarMEF();
   306  06BF  26D4               	fcall	_InicializarMEF
   307  06C0                     l865:	
   308                           ;main.c: 14: while(1){
   309                           
   310                           
   311                           ;main.c: 15: ActualizarMEF();
   312  06C0  2724               	fcall	_ActualizarMEF
   313  06C1  2EC0               	goto	l865
   314  06C2                     __end_of_main:	
   315                           
   316                           	psect	text1
   317  0706                     __ptext1:	
   318 ;; *************** function _initApp *****************
   319 ;; Defined at:
   320 ;;		line 15 in file "user.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;		None
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, status,2, status,0, pclath, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   334 ;;      Params:         0       0       0       0
   335 ;;      Locals:         0       0       0       0
   336 ;;      Temps:          2       0       0       0
   337 ;;      Totals:         2       0       0       0
   338 ;;Total ram usage:        2 bytes
   339 ;; Hardware stack levels used:    1
   340 ;; Hardware stack levels required when called:    1
   341 ;; This function calls:
   342 ;;		_uartConfig
   343 ;; This function is called by:
   344 ;;		_main
   345 ;; This function uses a non-reentrant model
   346 ;;
   347                           
   348                           
   349                           ;psect for function _initApp
   350  0706                     _initApp:	
   351                           
   352                           ;user.c: 16: CM2 = 1;
   353                           
   354                           ;incstack = 0
   355                           ; Regs used in _initApp: [wreg+status,2+status,0+pclath+cstack]
   356  0706  1283               	bcf	3,5	;RP0=0, select bank0
   357  0707  1303               	bcf	3,6	;RP1=0, select bank0
   358  0708  151F               	bsf	31,2	;volatile
   359                           
   360                           ;user.c: 17: CM1 = 1;
   361  0709  149F               	bsf	31,1	;volatile
   362                           
   363                           ;user.c: 18: CM0 = 1;
   364  070A  141F               	bsf	31,0	;volatile
   365                           
   366                           ;user.c: 20: TRISBbits.TRISB4 = 1;
   367  070B  1683               	bsf	3,5	;RP0=1, select bank1
   368  070C  1303               	bcf	3,6	;RP1=0, select bank1
   369  070D  1606               	bsf	6,4	;volatile
   370                           
   371                           ;user.c: 21: TRISBbits.TRISB5 = 1;
   372  070E  1686               	bsf	6,5	;volatile
   373                           
   374                           ;user.c: 22: TRISBbits.TRISB0 = 0;
   375  070F  1006               	bcf	6,0	;volatile
   376                           
   377                           ;user.c: 23: TRISBbits.TRISB3 = 0;
   378  0710  1186               	bcf	6,3	;volatile
   379                           
   380                           ;user.c: 24: TRISAbits.TRISA3 = 0;
   381  0711  1185               	bcf	5,3	;volatile
   382                           
   383                           ;user.c: 25: TRISAbits.TRISA4 = 0;
   384  0712  1205               	bcf	5,4	;volatile
   385                           
   386                           ;user.c: 26: TRISAbits.TRISA2=0;
   387  0713  1105               	bcf	5,2	;volatile
   388                           
   389                           ;user.c: 27: TRISAbits.TRISA1=0;
   390  0714  1085               	bcf	5,1	;volatile
   391                           
   392                           ;user.c: 29: PORTBbits.RB0 = 0;
   393  0715  1283               	bcf	3,5	;RP0=0, select bank0
   394  0716  1303               	bcf	3,6	;RP1=0, select bank0
   395  0717  1006               	bcf	6,0	;volatile
   396                           
   397                           ;user.c: 30: PORTBbits.RB3 = 0;
   398  0718  1186               	bcf	6,3	;volatile
   399                           
   400                           ;user.c: 32: uartConfig();
   401  0719  26E9               	fcall	_uartConfig
   402                           
   403                           ;user.c: 34: _delay((unsigned long)((100)*(4000000L/4000.0)));
   404  071A  3082               	movlw	130
   405  071B  00FA               	movwf	??_initApp+1
   406  071C  30DD               	movlw	221
   407  071D  00F9               	movwf	??_initApp
   408  071E                     u307:	
   409  071E  0BF9               	decfsz	??_initApp,f
   410  071F  2F1E               	goto	u307
   411  0720  0BFA               	decfsz	??_initApp+1,f
   412  0721  2F1E               	goto	u307
   413  0722  2F23               	nop2
   414  0723  0008               	return
   415  0724                     __end_of_initApp:	
   416                           
   417                           	psect	text2
   418  06E9                     __ptext2:	
   419 ;; *************** function _uartConfig *****************
   420 ;; Defined at:
   421 ;;		line 37 in file "user.c"
   422 ;; Parameters:    Size  Location     Type
   423 ;;		None
   424 ;; Auto vars:     Size  Location     Type
   425 ;;		None
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1    wreg      void 
   428 ;; Registers used:
   429 ;;		wreg
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   435 ;;      Params:         0       0       0       0
   436 ;;      Locals:         0       0       0       0
   437 ;;      Temps:          0       0       0       0
   438 ;;      Totals:         0       0       0       0
   439 ;;Total ram usage:        0 bytes
   440 ;; Hardware stack levels used:    1
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_initApp
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           
   449                           ;psect for function _uartConfig
   450  06E9                     _uartConfig:	
   451                           
   452                           ;user.c: 45: SPBRG = (4000000L - 9600 * 16L) / (9600 * 16L);
   453                           
   454                           ;incstack = 0
   455                           ; Regs used in _uartConfig: [wreg]
   456  06E9  3019               	movlw	25
   457  06EA  1683               	bsf	3,5	;RP0=1, select bank1
   458  06EB  1303               	bcf	3,6	;RP1=0, select bank1
   459  06EC  0099               	movwf	25	;volatile
   460                           
   461                           ;user.c: 46: BRGH = 1;
   462  06ED  1518               	bsf	24,2	;volatile
   463                           
   464                           ;user.c: 48: SYNC = 0;
   465  06EE  1218               	bcf	24,4	;volatile
   466                           
   467                           ;user.c: 49: SPEN = 1;
   468  06EF  1283               	bcf	3,5	;RP0=0, select bank0
   469  06F0  1303               	bcf	3,6	;RP1=0, select bank0
   470  06F1  1798               	bsf	24,7	;volatile
   471                           
   472                           ;user.c: 50: CREN = 1;
   473  06F2  1618               	bsf	24,4	;volatile
   474                           
   475                           ;user.c: 51: TXEN = 1;
   476  06F3  1683               	bsf	3,5	;RP0=1, select bank1
   477  06F4  1303               	bcf	3,6	;RP1=0, select bank1
   478  06F5  1698               	bsf	24,5	;volatile
   479  06F6  0008               	return
   480  06F7                     __end_of_uartConfig:	
   481                           
   482                           	psect	text3
   483  06D4                     __ptext3:	
   484 ;; *************** function _InicializarMEF *****************
   485 ;; Defined at:
   486 ;;		line 83 in file "user.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;		None
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, status,2, pclath, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   500 ;;      Params:         0       0       0       0
   501 ;;      Locals:         0       0       0       0
   502 ;;      Temps:          0       0       0       0
   503 ;;      Totals:         0       0       0       0
   504 ;;Total ram usage:        0 bytes
   505 ;; Hardware stack levels used:    1
   506 ;; Hardware stack levels required when called:    1
   507 ;; This function calls:
   508 ;;		_tickRead
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           
   515                           ;psect for function _InicializarMEF
   516  06D4                     _InicializarMEF:	
   517                           
   518                           ;user.c: 84: estadoActual = RX;
   519                           
   520                           ;incstack = 0
   521                           ; Regs used in _InicializarMEF: [wreg+status,2+pclath+cstack]
   522  06D4  01F6               	clrf	_estadoActual
   523                           
   524                           ;user.c: 85: PORTBbits.RB0=1;
   525  06D5  1283               	bcf	3,5	;RP0=0, select bank0
   526  06D6  1303               	bcf	3,6	;RP1=0, select bank0
   527  06D7  1406               	bsf	6,0	;volatile
   528                           
   529                           ;user.c: 86: tInicio = tickRead();
   530  06D8  26DE               	fcall	_tickRead
   531  06D9  087A               	movf	?_tickRead+1,w
   532  06DA  00F3               	movwf	_tInicio+1
   533  06DB  0879               	movf	?_tickRead,w
   534  06DC  00F2               	movwf	_tInicio
   535  06DD  0008               	return
   536  06DE                     __end_of_InicializarMEF:	
   537                           
   538                           	psect	text4
   539  06DE                     __ptext4:	
   540 ;; *************** function _tickRead *****************
   541 ;; Defined at:
   542 ;;		line 68 in file "user.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;		None
   545 ;; Auto vars:     Size  Location     Type
   546 ;;  aux             2    2[COMMON] unsigned int 
   547 ;; Return value:  Size  Location     Type
   548 ;;                  2    0[COMMON] unsigned int 
   549 ;; Registers used:
   550 ;;		wreg
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   556 ;;      Params:         2       0       0       0
   557 ;;      Locals:         2       0       0       0
   558 ;;      Temps:          0       0       0       0
   559 ;;      Totals:         4       0       0       0
   560 ;;Total ram usage:        4 bytes
   561 ;; Hardware stack levels used:    1
   562 ;; This function calls:
   563 ;;		Nothing
   564 ;; This function is called by:
   565 ;;		_InicializarMEF
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           
   570                           ;psect for function _tickRead
   571  06DE                     _tickRead:	
   572                           
   573                           ;user.c: 69: tick_t aux;
   574                           ;user.c: 70: GIE = 0;
   575                           
   576                           ;incstack = 0
   577                           ; Regs used in _tickRead: [wreg]
   578  06DE  138B               	bcf	11,7	;volatile
   579                           
   580                           ;user.c: 71: aux = tickCounter;
   581  06DF  0875               	movf	_tickCounter+1,w	;volatile
   582  06E0  00FC               	movwf	tickRead@aux+1
   583  06E1  0874               	movf	_tickCounter,w	;volatile
   584  06E2  00FB               	movwf	tickRead@aux
   585                           
   586                           ;user.c: 72: GIE = 1;
   587  06E3  178B               	bsf	11,7	;volatile
   588                           
   589                           ;user.c: 73: return aux;
   590  06E4  087C               	movf	tickRead@aux+1,w
   591  06E5  00FA               	movwf	?_tickRead+1
   592  06E6  087B               	movf	tickRead@aux,w
   593  06E7  00F9               	movwf	?_tickRead
   594  06E8  0008               	return
   595  06E9                     __end_of_tickRead:	
   596                           
   597                           	psect	text5
   598  0724                     __ptext5:	
   599 ;; *************** function _ActualizarMEF *****************
   600 ;; Defined at:
   601 ;;		line 88 in file "user.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;		None
   604 ;; Auto vars:     Size  Location     Type
   605 ;;		None
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   615 ;;      Params:         0       0       0       0
   616 ;;      Locals:         0       0       0       0
   617 ;;      Temps:          1       0       0       0
   618 ;;      Totals:         1       0       0       0
   619 ;;Total ram usage:        1 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; Hardware stack levels required when called:    1
   622 ;; This function calls:
   623 ;;		_RxMode
   624 ;;		_TxMode
   625 ;;		_uartReadByte
   626 ;;		_uartWriteByte
   627 ;; This function is called by:
   628 ;;		_main
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           
   633                           ;psect for function _ActualizarMEF
   634  0724                     _ActualizarMEF:	
   635                           
   636                           ;user.c: 89: static uint8_t res;
   637                           ;user.c: 90: static uint8_t aux;
   638                           ;user.c: 91: switch (estadoActual) {
   639                           
   640                           ;incstack = 0
   641                           ; Regs used in _ActualizarMEF: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   642  0724  2FEC               	goto	l813
   643  0725                     l671:	
   644                           ;user.c: 92: case RX:
   645                           
   646                           
   647                           ;user.c: 93: RxMode();
   648  0725  26C2               	fcall	_RxMode
   649                           
   650                           ;user.c: 94: if (uartReadByte(&res)) {
   651  0726  3078               	movlw	(low (ActualizarMEF@res| 0))& (0+255)
   652  0727  26F7               	fcall	_uartReadByte
   653  0728  1C03               	btfss	3,0
   654  0729  0008               	return
   655                           
   656                           ;user.c: 95: if (res == 0xC1 || res == 0xC2 || res == 0xC3 || res == 0xC4 || res == 0xC6
      +                           || res == 0xC7)
   657  072A  30C1               	movlw	193
   658  072B  0678               	xorwf	ActualizarMEF@res,w
   659  072C  1903               	btfsc	3,2
   660  072D  2F42               	goto	l687
   661  072E  30C2               	movlw	194
   662  072F  0678               	xorwf	ActualizarMEF@res,w
   663  0730  1903               	btfsc	3,2
   664  0731  2F42               	goto	l687
   665  0732  30C3               	movlw	195
   666  0733  0678               	xorwf	ActualizarMEF@res,w
   667  0734  1903               	btfsc	3,2
   668  0735  2F42               	goto	l687
   669  0736  30C4               	movlw	196
   670  0737  0678               	xorwf	ActualizarMEF@res,w
   671  0738  1903               	btfsc	3,2
   672  0739  2F42               	goto	l687
   673  073A  30C6               	movlw	198
   674  073B  0678               	xorwf	ActualizarMEF@res,w
   675  073C  1903               	btfsc	3,2
   676  073D  2F42               	goto	l687
   677  073E  30C7               	movlw	199
   678  073F  0678               	xorwf	ActualizarMEF@res,w
   679  0740  1D03               	btfss	3,2
   680  0741  2F47               	goto	l689
   681  0742                     l687:	
   682                           
   683                           ;user.c: 96: {
   684                           ;user.c: 97: estadoActual = ACTION;
   685  0742  3002               	movlw	2
   686  0743  00FB               	movwf	??_ActualizarMEF
   687  0744  087B               	movf	??_ActualizarMEF,w
   688  0745  00F6               	movwf	_estadoActual
   689                           
   690                           ;user.c: 98: } else {
   691  0746  0008               	return
   692  0747                     l689:	
   693                           
   694                           ;user.c: 99: res = 0;
   695  0747  01F8               	clrf	ActualizarMEF@res
   696                           
   697                           ;user.c: 100: estadoActual = RX;
   698  0748  01F6               	clrf	_estadoActual
   699                           
   700                           ;user.c: 102: }
   701                           ;user.c: 103: }
   702                           ;user.c: 104: break;
   703  0749  0008               	return
   704  074A                     l108:	
   705                           ;user.c: 107: case 0xC1:
   706                           
   707                           ;user.c: 106: switch(res){
   708                           
   709                           ;user.c: 105: case ACTION:
   710                           
   711                           
   712                           ;user.c: 108: PORTAbits.RA3 = 1;
   713  074A  1283               	bcf	3,5	;RP0=0, select bank0
   714  074B  1303               	bcf	3,6	;RP1=0, select bank0
   715  074C  1585               	bsf	5,3	;volatile
   716                           
   717                           ;user.c: 109: res=0;
   718  074D  01F8               	clrf	ActualizarMEF@res
   719                           
   720                           ;user.c: 110: TxMode();
   721  074E  26C7               	fcall	_TxMode
   722                           
   723                           ;user.c: 111: uartWriteByte(0xC8);
   724  074F  30C8               	movlw	200
   725  0750  26CC               	fcall	_uartWriteByte
   726  0751                     l697:	
   727                           ;user.c: 112: while (!uartReadByte(&aux));
   728                           
   729  0751  3077               	movlw	(low (ActualizarMEF@aux| 0))& (0+255)
   730  0752  26F7               	fcall	_uartReadByte
   731  0753  1C03               	btfss	3,0
   732  0754  2F51               	goto	l697
   733                           
   734                           ;user.c: 113: if (aux == 0xC8) {
   735  0755  30C8               	movlw	200
   736  0756  0677               	xorwf	ActualizarMEF@aux,w
   737  0757  1D03               	btfss	3,2
   738  0758  0008               	return
   739                           
   740                           ;user.c: 114: RxMode();
   741  0759  26C2               	fcall	_RxMode
   742                           
   743                           ;user.c: 115: estadoActual = RX;
   744  075A  01F6               	clrf	_estadoActual
   745                           
   746                           ;user.c: 116: }
   747                           ;user.c: 117: break;
   748  075B  0008               	return
   749  075C                     l114:	
   750                           ;user.c: 118: case 0xC2:
   751                           
   752                           
   753                           ;user.c: 119: TRISAbits.TRISA4=1;
   754  075C  1683               	bsf	3,5	;RP0=1, select bank1
   755  075D  1303               	bcf	3,6	;RP1=0, select bank1
   756  075E  1605               	bsf	5,4	;volatile
   757                           
   758                           ;user.c: 120: res=0;
   759  075F  01F8               	clrf	ActualizarMEF@res
   760                           
   761                           ;user.c: 121: TxMode();
   762  0760  26C7               	fcall	_TxMode
   763                           
   764                           ;user.c: 122: uartWriteByte(0xC8);
   765  0761  30C8               	movlw	200
   766  0762  26CC               	fcall	_uartWriteByte
   767  0763                     l711:	
   768                           ;user.c: 123: while(!uartReadByte(&aux));
   769                           
   770  0763  3077               	movlw	(low (ActualizarMEF@aux| 0))& (0+255)
   771  0764  26F7               	fcall	_uartReadByte
   772  0765  1C03               	btfss	3,0
   773  0766  2F63               	goto	l711
   774                           
   775                           ;user.c: 124: if(aux==0xC8){
   776  0767  30C8               	movlw	200
   777  0768  0677               	xorwf	ActualizarMEF@aux,w
   778  0769  1D03               	btfss	3,2
   779  076A  2F6D               	goto	l719
   780                           
   781                           ;user.c: 125: RxMode();
   782  076B  26C2               	fcall	_RxMode
   783                           
   784                           ;user.c: 126: estadoActual=RX;
   785  076C  01F6               	clrf	_estadoActual
   786  076D                     l719:	
   787                           
   788                           ;user.c: 127: }
   789                           ;user.c: 128: estadoActual=RX;
   790  076D  01F6               	clrf	_estadoActual
   791                           
   792                           ;user.c: 129: break;
   793  076E  0008               	return
   794  076F                     l119:	
   795                           ;user.c: 130: case 0xC3:
   796                           
   797                           
   798                           ;user.c: 131: PORTAbits.RA3 = 0;
   799  076F  1283               	bcf	3,5	;RP0=0, select bank0
   800  0770  1303               	bcf	3,6	;RP1=0, select bank0
   801  0771  1185               	bcf	5,3	;volatile
   802                           
   803                           ;user.c: 132: res=0;
   804  0772  01F8               	clrf	ActualizarMEF@res
   805                           
   806                           ;user.c: 133: TxMode();
   807  0773  26C7               	fcall	_TxMode
   808                           
   809                           ;user.c: 134: uartWriteByte(0xC8);
   810  0774  30C8               	movlw	200
   811  0775  26CC               	fcall	_uartWriteByte
   812  0776                     l727:	
   813                           ;user.c: 135: while(!uartReadByte(&aux));
   814                           
   815  0776  3077               	movlw	(low (ActualizarMEF@aux| 0))& (0+255)
   816  0777  26F7               	fcall	_uartReadByte
   817  0778  1C03               	btfss	3,0
   818  0779  2F76               	goto	l727
   819                           
   820                           ;user.c: 136: if(aux==0xC8){
   821  077A  30C8               	movlw	200
   822  077B  0677               	xorwf	ActualizarMEF@aux,w
   823  077C  1D03               	btfss	3,2
   824  077D  0008               	return
   825                           
   826                           ;user.c: 137: RxMode();
   827  077E  26C2               	fcall	_RxMode
   828                           
   829                           ;user.c: 138: estadoActual=RX;
   830  077F  01F6               	clrf	_estadoActual
   831                           
   832                           ;user.c: 139: }
   833                           ;user.c: 140: break;
   834  0780  0008               	return
   835  0781                     l124:	
   836                           ;user.c: 141: case 0xC4:
   837                           
   838                           
   839                           ;user.c: 142: TRISAbits.TRISA4=0;
   840  0781  1683               	bsf	3,5	;RP0=1, select bank1
   841  0782  1303               	bcf	3,6	;RP1=0, select bank1
   842  0783  1205               	bcf	5,4	;volatile
   843                           
   844                           ;user.c: 143: res=0;
   845  0784  01F8               	clrf	ActualizarMEF@res
   846                           
   847                           ;user.c: 144: TxMode();
   848  0785  26C7               	fcall	_TxMode
   849                           
   850                           ;user.c: 145: uartWriteByte(0xC8);
   851  0786  30C8               	movlw	200
   852  0787  26CC               	fcall	_uartWriteByte
   853  0788                     l741:	
   854                           ;user.c: 146: while(!uartReadByte(&aux));
   855                           
   856  0788  3077               	movlw	(low (ActualizarMEF@aux| 0))& (0+255)
   857  0789  26F7               	fcall	_uartReadByte
   858  078A  1C03               	btfss	3,0
   859  078B  2F88               	goto	l741
   860                           
   861                           ;user.c: 147: if (aux == 0xC8) {
   862  078C  30C8               	movlw	200
   863  078D  0677               	xorwf	ActualizarMEF@aux,w
   864  078E  1D03               	btfss	3,2
   865  078F  0008               	return
   866                           
   867                           ;user.c: 148: RxMode();
   868  0790  26C2               	fcall	_RxMode
   869                           
   870                           ;user.c: 149: estadoActual = RX;
   871  0791  01F6               	clrf	_estadoActual
   872                           
   873                           ;user.c: 150: }
   874                           ;user.c: 151: break;
   875  0792  0008               	return
   876  0793                     l129:	
   877                           ;user.c: 152: case 0xC6:
   878                           
   879                           
   880                           ;user.c: 153: if (PORTAbits.RA3 == 1) {
   881  0793  1283               	bcf	3,5	;RP0=0, select bank0
   882  0794  1303               	bcf	3,6	;RP1=0, select bank0
   883  0795  1D85               	btfss	5,3	;volatile
   884  0796  2FA5               	goto	l763
   885                           
   886                           ;user.c: 154: res = 0;
   887  0797  01F8               	clrf	ActualizarMEF@res
   888                           
   889                           ;user.c: 155: TxMode();
   890  0798  26C7               	fcall	_TxMode
   891                           
   892                           ;user.c: 156: uartWriteByte(0x75);
   893  0799  3075               	movlw	117
   894  079A  26CC               	fcall	_uartWriteByte
   895  079B                     l755:	
   896                           ;user.c: 157: while (!uartReadByte(&aux));
   897                           
   898  079B  3077               	movlw	(low (ActualizarMEF@aux| 0))& (0+255)
   899  079C  26F7               	fcall	_uartReadByte
   900  079D  1C03               	btfss	3,0
   901  079E  2F9B               	goto	l755
   902                           
   903                           ;user.c: 158: if (aux == 0x75) {
   904  079F  3075               	movlw	117
   905  07A0  0677               	xorwf	ActualizarMEF@aux,w
   906  07A1  1D03               	btfss	3,2
   907  07A2  2FA5               	goto	l763
   908                           
   909                           ;user.c: 159: RxMode();
   910  07A3  26C2               	fcall	_RxMode
   911                           
   912                           ;user.c: 160: estadoActual = RX;
   913  07A4  01F6               	clrf	_estadoActual
   914  07A5                     l763:	
   915                           
   916                           ;user.c: 161: }
   917                           ;user.c: 162: }
   918                           ;user.c: 163: if (PORTAbits.RA3 == 0) {
   919  07A5  1283               	bcf	3,5	;RP0=0, select bank0
   920  07A6  1303               	bcf	3,6	;RP1=0, select bank0
   921  07A7  1985               	btfsc	5,3	;volatile
   922  07A8  0008               	return
   923                           
   924                           ;user.c: 164: res = 0;
   925  07A9  01F8               	clrf	ActualizarMEF@res
   926                           
   927                           ;user.c: 165: TxMode();
   928  07AA  26C7               	fcall	_TxMode
   929                           
   930                           ;user.c: 166: uartWriteByte(0x79);
   931  07AB  3079               	movlw	121
   932  07AC  26CC               	fcall	_uartWriteByte
   933  07AD                     l771:	
   934                           ;user.c: 167: while (!uartReadByte(&aux));
   935                           
   936  07AD  3077               	movlw	(low (ActualizarMEF@aux| 0))& (0+255)
   937  07AE  26F7               	fcall	_uartReadByte
   938  07AF  1C03               	btfss	3,0
   939  07B0  2FAD               	goto	l771
   940                           
   941                           ;user.c: 168: if (aux == 0x79) {
   942  07B1  3079               	movlw	121
   943  07B2  0677               	xorwf	ActualizarMEF@aux,w
   944  07B3  1D03               	btfss	3,2
   945  07B4  0008               	return
   946                           
   947                           ;user.c: 169: RxMode();
   948  07B5  26C2               	fcall	_RxMode
   949                           
   950                           ;user.c: 170: estadoActual = RX;
   951  07B6  01F6               	clrf	_estadoActual
   952                           
   953                           ;user.c: 171: }
   954                           ;user.c: 172: }
   955                           ;user.c: 173: break;
   956  07B7  0008               	return
   957  07B8                     l140:	
   958                           ;user.c: 174: case 0xC7:
   959                           
   960                           
   961                           ;user.c: 175: if (TRISAbits.TRISA4 == 1) {
   962  07B8  1683               	bsf	3,5	;RP0=1, select bank1
   963  07B9  1303               	bcf	3,6	;RP1=0, select bank1
   964  07BA  1E05               	btfss	5,4	;volatile
   965  07BB  2FCA               	goto	l793
   966                           
   967                           ;user.c: 176: res = 0;
   968  07BC  01F8               	clrf	ActualizarMEF@res
   969                           
   970                           ;user.c: 177: TxMode();
   971  07BD  26C7               	fcall	_TxMode
   972                           
   973                           ;user.c: 178: uartWriteByte(0x75);
   974  07BE  3075               	movlw	117
   975  07BF  26CC               	fcall	_uartWriteByte
   976  07C0                     l785:	
   977                           ;user.c: 179: while (!uartReadByte(&aux));
   978                           
   979  07C0  3077               	movlw	(low (ActualizarMEF@aux| 0))& (0+255)
   980  07C1  26F7               	fcall	_uartReadByte
   981  07C2  1C03               	btfss	3,0
   982  07C3  2FC0               	goto	l785
   983                           
   984                           ;user.c: 180: if (aux == 0x75) {
   985  07C4  3075               	movlw	117
   986  07C5  0677               	xorwf	ActualizarMEF@aux,w
   987  07C6  1D03               	btfss	3,2
   988  07C7  2FCA               	goto	l793
   989                           
   990                           ;user.c: 181: RxMode();
   991  07C8  26C2               	fcall	_RxMode
   992                           
   993                           ;user.c: 182: estadoActual = RX;
   994  07C9  01F6               	clrf	_estadoActual
   995  07CA                     l793:	
   996                           
   997                           ;user.c: 183: }
   998                           ;user.c: 184: }
   999                           ;user.c: 185: if (TRISAbits.TRISA4 == 0) {
  1000  07CA  1683               	bsf	3,5	;RP0=1, select bank1
  1001  07CB  1303               	bcf	3,6	;RP1=0, select bank1
  1002  07CC  1A05               	btfsc	5,4	;volatile
  1003  07CD  0008               	return
  1004                           
  1005                           ;user.c: 186: res = 0;
  1006  07CE  01F8               	clrf	ActualizarMEF@res
  1007                           
  1008                           ;user.c: 187: TxMode();
  1009  07CF  26C7               	fcall	_TxMode
  1010                           
  1011                           ;user.c: 188: uartWriteByte(0x79);
  1012  07D0  3079               	movlw	121
  1013  07D1  26CC               	fcall	_uartWriteByte
  1014  07D2                     l801:	
  1015                           ;user.c: 189: while (!uartReadByte(&aux));
  1016                           
  1017  07D2  3077               	movlw	(low (ActualizarMEF@aux| 0))& (0+255)
  1018  07D3  26F7               	fcall	_uartReadByte
  1019  07D4  1C03               	btfss	3,0
  1020  07D5  2FD2               	goto	l801
  1021                           
  1022                           ;user.c: 190: if (aux == 0x79) {
  1023  07D6  3079               	movlw	121
  1024  07D7  0677               	xorwf	ActualizarMEF@aux,w
  1025  07D8  1D03               	btfss	3,2
  1026  07D9  0008               	return
  1027                           
  1028                           ;user.c: 191: RxMode();
  1029  07DA  26C2               	fcall	_RxMode
  1030                           
  1031                           ;user.c: 192: estadoActual = RX;
  1032  07DB  01F6               	clrf	_estadoActual
  1033                           
  1034                           ;user.c: 196: }
  1035                           
  1036                           ;user.c: 193: }
  1037                           ;user.c: 194: }
  1038                           ;user.c: 195: break;
  1039  07DC  0008               	return
  1040  07DD                     l811:	
  1041  07DD  0878               	movf	ActualizarMEF@res,w
  1042                           
  1043                           ; Switch size 1, requested type "space"
  1044                           ; Number of cases is 6, Range of values is 193 to 199
  1045                           ; switch strategies available:
  1046                           ; Name         Instructions Cycles
  1047                           ; direct_byte           16     9 (fixed)
  1048                           ; simple_byte           19    10 (average)
  1049                           ; jumptable            263     9 (fixed)
  1050                           ;	Chosen strategy is direct_byte
  1051  07DE  3E3F               	addlw	-193
  1052  07DF  1C03               	skipc
  1053  07E0  0008               	return
  1054  07E1  0084               	movwf	4
  1055  07E2  3007               	movlw	7
  1056  07E3  0204               	subwf	4,w
  1057  07E4  1803               	skipnc
  1058  07E5  0008               	return
  1059  07E6  3000               	movlw	high S887
  1060  07E7  008A               	movwf	10
  1061  07E8  3001               	movlw	low S887
  1062  07E9  0704               	addwf	4,w
  1063  07EA  0082               	movwf	2
  1064                           
  1065                           ;user.c: 197: }
  1066  07EB  0008               	return
  1067  07EC                     l813:	
  1068  07EC  0876               	movf	_estadoActual,w
  1069                           
  1070                           ; Switch size 1, requested type "space"
  1071                           ; Number of cases is 2, Range of values is 0 to 2
  1072                           ; switch strategies available:
  1073                           ; Name         Instructions Cycles
  1074                           ; simple_byte            7     4 (average)
  1075                           ; direct_byte            9     6 (fixed)
  1076                           ; jumptable            260     6 (fixed)
  1077                           ;	Chosen strategy is simple_byte
  1078  07ED  3A00               	xorlw	0	; case 0
  1079  07EE  1903               	skipnz
  1080  07EF  2F25               	goto	l671
  1081  07F0  3A02               	xorlw	2	; case 2
  1082  07F1  1903               	skipnz
  1083  07F2  2FDD               	goto	l811
  1084  07F3  2FF4               	goto	l151
  1085  07F4                     l151:	
  1086  07F4  0008               	return
  1087  07F5                     __end_of_ActualizarMEF:	
  1088                           
  1089                           	psect	swtext1
  1090  0001                     __pswtext1:	
  1091  0001                     S887:	
  1092  0001  2F4A               	ljmp	l108
  1093  0002  2F5C               	ljmp	l114
  1094  0003  2F6F               	ljmp	l119
  1095  0004  2F81               	ljmp	l124
  1096  0005  2FF4               	ljmp	l151
  1097  0006  2F93               	ljmp	l129
  1098  0007  2FB8               	ljmp	l140
  1099                           
  1100                           	psect	text6
  1101  06CC                     __ptext6:	
  1102 ;; *************** function _uartWriteByte *****************
  1103 ;; Defined at:
  1104 ;;		line 62 in file "user.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;  value           1    wreg     unsigned char 
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  value           1    0[COMMON] unsigned char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1118 ;;      Params:         0       0       0       0
  1119 ;;      Locals:         1       0       0       0
  1120 ;;      Temps:          0       0       0       0
  1121 ;;      Totals:         1       0       0       0
  1122 ;;Total ram usage:        1 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_ActualizarMEF
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           
  1132                           ;psect for function _uartWriteByte
  1133  06CC                     _uartWriteByte:	
  1134                           
  1135                           ;incstack = 0
  1136                           ; Regs used in _uartWriteByte: [wreg]
  1137                           ;uartWriteByte@value stored from wreg
  1138  06CC  00F9               	movwf	uartWriteByte@value
  1139  06CD                     l79:	
  1140                           ;user.c: 64: continue;
  1141                           
  1142                           ;user.c: 63: while (!TXIF)
  1143                           
  1144  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  1145  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  1146  06CF  1E0C               	btfss	12,4	;volatile
  1147  06D0  2ECD               	goto	l79
  1148                           
  1149                           ;user.c: 65: TXREG = value;
  1150  06D1  0879               	movf	uartWriteByte@value,w
  1151  06D2  0099               	movwf	25	;volatile
  1152  06D3  0008               	return
  1153  06D4                     __end_of_uartWriteByte:	
  1154                           
  1155                           	psect	text7
  1156  06F7                     __ptext7:	
  1157 ;; *************** function _uartReadByte *****************
  1158 ;; Defined at:
  1159 ;;		line 54 in file "user.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  receivedByte    1    wreg     PTR unsigned char 
  1162 ;;		 -> ActualizarMEF@aux(1), ActualizarMEF@res(1), 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  receivedByte    1    1[COMMON] PTR unsigned char 
  1165 ;;		 -> ActualizarMEF@aux(1), ActualizarMEF@res(1), 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;		None               void
  1168 ;; Registers used:
  1169 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1175 ;;      Params:         0       0       0       0
  1176 ;;      Locals:         1       0       0       0
  1177 ;;      Temps:          1       0       0       0
  1178 ;;      Totals:         2       0       0       0
  1179 ;;Total ram usage:        2 bytes
  1180 ;; Hardware stack levels used:    1
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_ActualizarMEF
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           
  1189                           ;psect for function _uartReadByte
  1190  06F7                     _uartReadByte:	
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _uartReadByte: [wreg-fsr0h+status,2+status,0]
  1194                           ;uartReadByte@receivedByte stored from wreg
  1195  06F7  00FA               	movwf	uartReadByte@receivedByte
  1196                           
  1197                           ;user.c: 55: if (RCIF) {
  1198  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  1199  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  1200  06FA  1E8C               	btfss	12,5	;volatile
  1201  06FB  2F04               	goto	l637
  1202                           
  1203                           ;user.c: 56: *receivedByte = RCREG;
  1204  06FC  081A               	movf	26,w	;volatile
  1205  06FD  00F9               	movwf	??_uartReadByte
  1206  06FE  087A               	movf	uartReadByte@receivedByte,w
  1207  06FF  0084               	movwf	4
  1208  0700  0879               	movf	??_uartReadByte,w
  1209  0701  0080               	movwf	0
  1210                           
  1211                           ;user.c: 57: return 1;
  1212  0702  1403               	setc
  1213  0703  0008               	return
  1214  0704                     l637:	
  1215                           
  1216                           ;user.c: 58: }
  1217                           ;user.c: 59: return 0;
  1218  0704  1003               	clrc
  1219  0705  0008               	return
  1220  0706                     __end_of_uartReadByte:	
  1221                           
  1222                           	psect	text8
  1223  06C7                     __ptext8:	
  1224 ;; *************** function _TxMode *****************
  1225 ;; Defined at:
  1226 ;;		line 204 in file "user.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		None
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1240 ;;      Params:         0       0       0       0
  1241 ;;      Locals:         0       0       0       0
  1242 ;;      Temps:          0       0       0       0
  1243 ;;      Totals:         0       0       0       0
  1244 ;;Total ram usage:        0 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; This function calls:
  1247 ;;		Nothing
  1248 ;; This function is called by:
  1249 ;;		_ActualizarMEF
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           
  1254                           ;psect for function _TxMode
  1255  06C7                     _TxMode:	
  1256                           
  1257                           ;user.c: 205: PORTAbits.RA2=0;
  1258                           
  1259                           ;incstack = 0
  1260                           ; Regs used in _TxMode: []
  1261  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  1262  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  1263  06C9  1105               	bcf	5,2	;volatile
  1264                           
  1265                           ;user.c: 206: PORTAbits.RA1=1;
  1266  06CA  1485               	bsf	5,1	;volatile
  1267  06CB  0008               	return
  1268  06CC                     __end_of_TxMode:	
  1269                           
  1270                           	psect	text9
  1271  06C2                     __ptext9:	
  1272 ;; *************** function _RxMode *****************
  1273 ;; Defined at:
  1274 ;;		line 209 in file "user.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;		None
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;		None
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  1    wreg      void 
  1281 ;; Registers used:
  1282 ;;		None
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1288 ;;      Params:         0       0       0       0
  1289 ;;      Locals:         0       0       0       0
  1290 ;;      Temps:          0       0       0       0
  1291 ;;      Totals:         0       0       0       0
  1292 ;;Total ram usage:        0 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; This function calls:
  1295 ;;		Nothing
  1296 ;; This function is called by:
  1297 ;;		_ActualizarMEF
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           
  1302                           ;psect for function _RxMode
  1303  06C2                     _RxMode:	
  1304                           
  1305                           ;user.c: 210: PORTAbits.RA2=0;
  1306                           
  1307                           ;incstack = 0
  1308                           ; Regs used in _RxMode: []
  1309  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1310  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1311  06C4  1105               	bcf	5,2	;volatile
  1312                           
  1313                           ;user.c: 211: PORTAbits.RA1=0;
  1314  06C5  1085               	bcf	5,1	;volatile
  1315  06C6  0008               	return
  1316  06C7                     __end_of_RxMode:	
  1317  007E                     btemp	set	126	;btemp
  1318  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    uartReadByte@receivedByte	PTR unsigned char  size(1) Largest target is 1
		 -> ActualizarMEF@aux(COMMON[1]), ActualizarMEF@res(COMMON[1]), 


Critical Paths under _main in COMMON

    _InicializarMEF->_tickRead
    _ActualizarMEF->_uartReadByte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     269
                      _ActualizarMEF
                     _InicializarMEF
                            _initApp
 ---------------------------------------------------------------------------------
 (1) _initApp                                              2     2      0       0
                                              0 COMMON     2     2      0
                         _uartConfig
 ---------------------------------------------------------------------------------
 (2) _uartConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InicializarMEF                                       0     0      0      23
                           _tickRead
 ---------------------------------------------------------------------------------
 (2) _tickRead                                             4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ActualizarMEF                                        1     1      0     246
                                              2 COMMON     1     1      0
                             _RxMode
                             _TxMode
                       _uartReadByte
                      _uartWriteByte
 ---------------------------------------------------------------------------------
 (2) _uartWriteByte                                        1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReadByte                                         2     2      0     231
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TxMode                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RxMode                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ActualizarMEF
     _RxMode
     _TxMode
     _uartReadByte
     _uartWriteByte
   _InicializarMEF
     _tickRead
   _initApp
     _uartConfig

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       D      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Oct 29 10:25:24 2019

         ??_uartWriteByte 0079                         pc 0002               __CFG_CP$OFF 0000  
                      l79 06CD                        fsr 0004                       S887 0001  
                     l114 075C                       l140 07B8                       l124 0781  
                     l108 074A                       l119 076F                       l151 07F4  
                     l129 0793                       _CM0 00F8                       l711 0763  
                     _CM1 00F9                       _CM2 00FA                       l801 07D2  
                     l811 07DD                       l637 0704                       l741 0788  
                     l813 07EC                       l727 0776                       l719 076D  
                     l671 0725                       l771 07AD                       l755 079B  
                     l763 07A5                       l687 0742                       l785 07C0  
                     l793 07CA                       l697 0751                       l689 0747  
                     l865 06C0                       _GIE 005F                       u307 071E  
            __CFG_CPD$OFF 0000                       fsr0 0004                       indf 0000  
            __CFG_LVP$OFF 0000                      _BRGH 04C2                      _CREN 00C4  
                    _RCIF 0065                      _SPEN 00C7                      _TXEN 04C5  
                    _TXIF 0064                      _SYNC 04C4            _InicializarMEF 06D4  
                    _main 06BE                      btemp 007E                      start 0000  
                   ?_main 0079             __CFG_WDTE$OFF 0000                     _RCREG 001A  
                   _SPBRG 0099                     _TXREG 0019           __end_of_initApp 0724  
  __end_of_InicializarMEF 06DE            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E            __CFG_MCLRE$OFF 0000  
         __initialization 07F5              __end_of_main 06C2          ActualizarMEF@aux 0077  
        ActualizarMEF@res 0078                    ??_main 007D           ?_InicializarMEF 0079  
          __CFG_PWRTE$OFF 0000                    _RxMode 06C2                    _TxMode 06C7  
uartReadByte@receivedByte 007A          __end_of_tickRead 06E9                 ??_initApp 0079  
 __end_of__initialization 07FE            __pcstackCOMMON 0079                   ?_RxMode 0079  
              __pmaintext 06BE                   ?_TxMode 0079    __size_of_ActualizarMEF 00D1  
   __end_of_uartWriteByte 06D4               tickRead@aux 007B                 ?_tickRead 0079  
         __size_of_RxMode 0005           __size_of_TxMode 0005             ?_uartReadByte 0079  
                 _tActual 0070                   _tInicio 0072                   __ptext1 0706  
                 __ptext2 06E9                   __ptext3 06D4                   __ptext4 06DE  
                 __ptext5 0724                   __ptext6 06CC                   __ptext7 06F7  
                 __ptext8 06C7                   __ptext9 06C2                   _initApp 0706  
        ??_InicializarMEF 007D             _ActualizarMEF 0724      end_of_initialization 07FE  
              ??_tickRead 007B                _uartConfig 06E9            ??_uartReadByte 0079  
               _PORTAbits 0005                 _PORTBbits 0006                 _TRISAbits 0085  
               _TRISBbits 0086            ?_ActualizarMEF 0079            __end_of_RxMode 06C7  
          __end_of_TxMode 06CC       start_initialization 07F5               ?_uartConfig 0079  
                ??_RxMode 0079                  ??_TxMode 0079              _estadoActual 0076  
         ??_ActualizarMEF 007B               __pbssCOMMON 0070                 ___latbits 0000  
    __end_of_uartReadByte 0706         __size_of_tickRead 000B                 __pswtext1 0001  
                ?_initApp 0079       __size_of_uartConfig 000E    __size_of_uartWriteByte 0008  
      uartWriteByte@value 0079             _uartWriteByte 06CC     __size_of_uartReadByte 000F  
        __size_of_initApp 001E   __size_of_InicializarMEF 000A             __size_of_main 0004  
                _tickRead 06DE              ??_uartConfig 0079              _uartReadByte 06F7  
          ?_uartWriteByte 0079               _tickCounter 0074        __end_of_uartConfig 06F7  
   __end_of_ActualizarMEF 07F5        __CFG_FOSC$INTOSCIO 0000  
